{"ast":null,"code":"import { SorobanRpc, TransactionBuilder, Networks, Operation, Asset } from 'soroban-client';\n\n// Stellar Testnet Configuration\nconst TESTNET_URL = 'https://soroban-testnet.stellar.org';\nconst TESTNET_PASSPHRASE = 'Test SDF Network ; September 2015';\n\n// DonáFácil configuration\nconst DONATION_PERCENTAGE = 0.01; // 1%\nconst DONATION_ADDRESS = 'GDRDSX2ZOPTRCVWPBA55TXQVNRWM6RNLTLZ5YGVIJ5UXGCDPWXH4KQUL'; // Admin address\n\nclass PaymentService {\n  constructor() {\n    this.server = new SorobanRpc.Server(TESTNET_URL);\n    this.networkPassphrase = TESTNET_PASSPHRASE;\n  }\n\n  // Check if Freighter is available\n  isFreighterAvailable() {\n    return typeof window.freighterApi !== 'undefined';\n  }\n\n  // Connect to Freighter wallet\n  async connectWallet() {\n    if (!this.isFreighterAvailable()) {\n      throw new Error('Freighter wallet no está disponible. Por favor instala la extensión.');\n    }\n    try {\n      const isConnected = await window.freighterApi.isConnected();\n      if (!isConnected) {\n        await window.freighterApi.connect();\n      }\n      const publicKey = await window.freighterApi.getPublicKey();\n      const network = await window.freighterApi.getNetwork();\n      if (network !== 'TESTNET') {\n        throw new Error('Por favor cambia Freighter a TESTNET');\n      }\n      return {\n        publicKey,\n        isConnected: true,\n        network\n      };\n    } catch (error) {\n      throw new Error(`Error conectando Freighter: ${error.message}`);\n    }\n  }\n\n  // Get account balance\n  async getBalance(publicKey) {\n    try {\n      var _account$balances$fin;\n      const account = await this.server.getAccount(publicKey);\n      return ((_account$balances$fin = account.balances.find(balance => balance.asset_type === 'native')) === null || _account$balances$fin === void 0 ? void 0 : _account$balances$fin.balance) || '0';\n    } catch (error) {\n      console.error('Error getting balance:', error);\n      return '0';\n    }\n  }\n\n  // Calculate payment amounts\n  calculatePaymentAmounts(baseAmount, includeDonation = true) {\n    const baseAmountXLM = baseAmount * 0.15; // Convert USD to XLM (approximate)\n    const donationAmount = includeDonation ? baseAmountXLM * DONATION_PERCENTAGE : 0;\n    const totalAmount = baseAmountXLM + donationAmount;\n    return {\n      baseAmount: baseAmountXLM,\n      donationAmount,\n      totalAmount,\n      baseAmountUSD: baseAmount,\n      donationAmountUSD: baseAmount * DONATION_PERCENTAGE,\n      totalAmountUSD: baseAmount * (1 + DONATION_PERCENTAGE)\n    };\n  }\n\n  // Create and send payment transaction\n  async processPayment(amounts, includeDonation = true) {\n    if (!this.isFreighterAvailable()) {\n      throw new Error('Freighter wallet no está disponible');\n    }\n    try {\n      const publicKey = await window.freighterApi.getPublicKey();\n\n      // Get account details\n      const account = await this.server.getAccount(publicKey);\n\n      // Create transaction\n      const transaction = new TransactionBuilder(account, {\n        fee: '100',\n        networkPassphrase: this.networkPassphrase\n      });\n\n      // Add base payment operation\n      transaction.addOperation(Operation.payment({\n        destination: DONATION_ADDRESS,\n        // For demo, sending to admin\n        asset: Asset.native(),\n        amount: amounts.baseAmount.toFixed(7)\n      }));\n\n      // Add donation operation if enabled\n      if (includeDonation && amounts.donationAmount > 0) {\n        transaction.addOperation(Operation.payment({\n          destination: DONATION_ADDRESS,\n          asset: Asset.native(),\n          amount: amounts.donationAmount.toFixed(7)\n        }));\n      }\n\n      // Set timeout\n      transaction.setTimeout(30);\n\n      // Build transaction\n      const builtTransaction = transaction.build();\n\n      // Sign with Freighter\n      const signedTransaction = await window.freighterApi.signTransaction(builtTransaction.toXDR(), this.networkPassphrase);\n\n      // Submit transaction\n      const response = await this.server.sendTransaction(signedTransaction);\n      if (response.status === 'PENDING') {\n        // Wait for transaction to be confirmed\n        const result = await this.waitForTransaction(response.hash);\n        return {\n          success: true,\n          hash: response.hash,\n          result,\n          amounts\n        };\n      } else {\n        throw new Error(`Transaction failed: ${response.status}`);\n      }\n    } catch (error) {\n      throw new Error(`Error procesando pago: ${error.message}`);\n    }\n  }\n\n  // Wait for transaction confirmation\n  async waitForTransaction(hash, timeout = 30000) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n      try {\n        const response = await this.server.getTransaction(hash);\n        if (response.status === 'SUCCESS') {\n          return response;\n        } else if (response.status === 'FAILED') {\n          throw new Error('Transaction failed');\n        }\n        // Wait 2 seconds before checking again\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (error) {\n        // Transaction might not be available yet, continue waiting\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n    }\n    throw new Error('Transaction timeout');\n  }\n\n  // Get transaction details\n  async getTransactionDetails(hash) {\n    try {\n      const response = await this.server.getTransaction(hash);\n      return response;\n    } catch (error) {\n      throw new Error(`Error obteniendo detalles de transacción: ${error.message}`);\n    }\n  }\n\n  // Format XLM amount\n  formatXLM(amount) {\n    return parseFloat(amount).toFixed(7);\n  }\n\n  // Format USD amount\n  formatUSD(amount) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  }\n}\nconst paymentService = new PaymentService();\nexport default paymentService;","map":{"version":3,"names":["SorobanRpc","TransactionBuilder","Networks","Operation","Asset","TESTNET_URL","TESTNET_PASSPHRASE","DONATION_PERCENTAGE","DONATION_ADDRESS","PaymentService","constructor","server","Server","networkPassphrase","isFreighterAvailable","window","freighterApi","connectWallet","Error","isConnected","connect","publicKey","getPublicKey","network","getNetwork","error","message","getBalance","_account$balances$fin","account","getAccount","balances","find","balance","asset_type","console","calculatePaymentAmounts","baseAmount","includeDonation","baseAmountXLM","donationAmount","totalAmount","baseAmountUSD","donationAmountUSD","totalAmountUSD","processPayment","amounts","transaction","fee","addOperation","payment","destination","asset","native","amount","toFixed","setTimeout","builtTransaction","build","signedTransaction","signTransaction","toXDR","response","sendTransaction","status","result","waitForTransaction","hash","success","timeout","startTime","Date","now","getTransaction","Promise","resolve","getTransactionDetails","formatXLM","parseFloat","formatUSD","Intl","NumberFormat","style","currency","format","paymentService"],"sources":["/Users/juanpabloiannotti/baf-crowdfunding-contract/frontend/src/services/paymentService.js"],"sourcesContent":["import { SorobanRpc, TransactionBuilder, Networks, Operation, Asset } from 'soroban-client';\n\n// Stellar Testnet Configuration\nconst TESTNET_URL = 'https://soroban-testnet.stellar.org';\nconst TESTNET_PASSPHRASE = 'Test SDF Network ; September 2015';\n\n// DonáFácil configuration\nconst DONATION_PERCENTAGE = 0.01; // 1%\nconst DONATION_ADDRESS = 'GDRDSX2ZOPTRCVWPBA55TXQVNRWM6RNLTLZ5YGVIJ5UXGCDPWXH4KQUL'; // Admin address\n\nclass PaymentService {\n  constructor() {\n    this.server = new SorobanRpc.Server(TESTNET_URL);\n    this.networkPassphrase = TESTNET_PASSPHRASE;\n  }\n\n  // Check if Freighter is available\n  isFreighterAvailable() {\n    return typeof window.freighterApi !== 'undefined';\n  }\n\n  // Connect to Freighter wallet\n  async connectWallet() {\n    if (!this.isFreighterAvailable()) {\n      throw new Error('Freighter wallet no está disponible. Por favor instala la extensión.');\n    }\n\n    try {\n      const isConnected = await window.freighterApi.isConnected();\n      if (!isConnected) {\n        await window.freighterApi.connect();\n      }\n      \n      const publicKey = await window.freighterApi.getPublicKey();\n      const network = await window.freighterApi.getNetwork();\n      \n      if (network !== 'TESTNET') {\n        throw new Error('Por favor cambia Freighter a TESTNET');\n      }\n\n      return {\n        publicKey,\n        isConnected: true,\n        network\n      };\n    } catch (error) {\n      throw new Error(`Error conectando Freighter: ${error.message}`);\n    }\n  }\n\n  // Get account balance\n  async getBalance(publicKey) {\n    try {\n      const account = await this.server.getAccount(publicKey);\n      return account.balances.find(balance => balance.asset_type === 'native')?.balance || '0';\n    } catch (error) {\n      console.error('Error getting balance:', error);\n      return '0';\n    }\n  }\n\n  // Calculate payment amounts\n  calculatePaymentAmounts(baseAmount, includeDonation = true) {\n    const baseAmountXLM = baseAmount * 0.15; // Convert USD to XLM (approximate)\n    const donationAmount = includeDonation ? baseAmountXLM * DONATION_PERCENTAGE : 0;\n    const totalAmount = baseAmountXLM + donationAmount;\n\n    return {\n      baseAmount: baseAmountXLM,\n      donationAmount,\n      totalAmount,\n      baseAmountUSD: baseAmount,\n      donationAmountUSD: baseAmount * DONATION_PERCENTAGE,\n      totalAmountUSD: baseAmount * (1 + DONATION_PERCENTAGE)\n    };\n  }\n\n  // Create and send payment transaction\n  async processPayment(amounts, includeDonation = true) {\n    if (!this.isFreighterAvailable()) {\n      throw new Error('Freighter wallet no está disponible');\n    }\n\n    try {\n      const publicKey = await window.freighterApi.getPublicKey();\n      \n      // Get account details\n      const account = await this.server.getAccount(publicKey);\n      \n      // Create transaction\n      const transaction = new TransactionBuilder(account, {\n        fee: '100',\n        networkPassphrase: this.networkPassphrase\n      });\n\n      // Add base payment operation\n      transaction.addOperation(\n        Operation.payment({\n          destination: DONATION_ADDRESS, // For demo, sending to admin\n          asset: Asset.native(),\n          amount: amounts.baseAmount.toFixed(7)\n        })\n      );\n\n      // Add donation operation if enabled\n      if (includeDonation && amounts.donationAmount > 0) {\n        transaction.addOperation(\n          Operation.payment({\n            destination: DONATION_ADDRESS,\n            asset: Asset.native(),\n            amount: amounts.donationAmount.toFixed(7)\n          })\n        );\n      }\n\n      // Set timeout\n      transaction.setTimeout(30);\n\n      // Build transaction\n      const builtTransaction = transaction.build();\n\n      // Sign with Freighter\n      const signedTransaction = await window.freighterApi.signTransaction(\n        builtTransaction.toXDR(),\n        this.networkPassphrase\n      );\n\n      // Submit transaction\n      const response = await this.server.sendTransaction(signedTransaction);\n      \n      if (response.status === 'PENDING') {\n        // Wait for transaction to be confirmed\n        const result = await this.waitForTransaction(response.hash);\n        return {\n          success: true,\n          hash: response.hash,\n          result,\n          amounts\n        };\n      } else {\n        throw new Error(`Transaction failed: ${response.status}`);\n      }\n\n    } catch (error) {\n      throw new Error(`Error procesando pago: ${error.message}`);\n    }\n  }\n\n  // Wait for transaction confirmation\n  async waitForTransaction(hash, timeout = 30000) {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      try {\n        const response = await this.server.getTransaction(hash);\n        if (response.status === 'SUCCESS') {\n          return response;\n        } else if (response.status === 'FAILED') {\n          throw new Error('Transaction failed');\n        }\n        // Wait 2 seconds before checking again\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (error) {\n        // Transaction might not be available yet, continue waiting\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n    }\n    \n    throw new Error('Transaction timeout');\n  }\n\n  // Get transaction details\n  async getTransactionDetails(hash) {\n    try {\n      const response = await this.server.getTransaction(hash);\n      return response;\n    } catch (error) {\n      throw new Error(`Error obteniendo detalles de transacción: ${error.message}`);\n    }\n  }\n\n  // Format XLM amount\n  formatXLM(amount) {\n    return parseFloat(amount).toFixed(7);\n  }\n\n  // Format USD amount\n  formatUSD(amount) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  }\n}\n\nconst paymentService = new PaymentService();\nexport default paymentService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}